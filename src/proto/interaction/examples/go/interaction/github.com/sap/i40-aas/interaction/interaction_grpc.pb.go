// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InteractionIngressClient is the client API for InteractionIngress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionIngressClient interface {
	SendInteractionMessage(ctx context.Context, in *InteractionMessage, opts ...grpc.CallOption) (*InteractionStatus, error)
}

type interactionIngressClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionIngressClient(cc grpc.ClientConnInterface) InteractionIngressClient {
	return &interactionIngressClient{cc}
}

func (c *interactionIngressClient) SendInteractionMessage(ctx context.Context, in *InteractionMessage, opts ...grpc.CallOption) (*InteractionStatus, error) {
	out := new(InteractionStatus)
	err := c.cc.Invoke(ctx, "/sap.i40aas.interaction.InteractionIngress/SendInteractionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionIngressServer is the server API for InteractionIngress service.
// All implementations must embed UnimplementedInteractionIngressServer
// for forward compatibility
type InteractionIngressServer interface {
	SendInteractionMessage(context.Context, *InteractionMessage) (*InteractionStatus, error)
	mustEmbedUnimplementedInteractionIngressServer()
}

// UnimplementedInteractionIngressServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionIngressServer struct {
}

func (*UnimplementedInteractionIngressServer) SendInteractionMessage(context.Context, *InteractionMessage) (*InteractionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInteractionMessage not implemented")
}
func (*UnimplementedInteractionIngressServer) mustEmbedUnimplementedInteractionIngressServer() {}

func RegisterInteractionIngressServer(s *grpc.Server, srv InteractionIngressServer) {
	s.RegisterService(&_InteractionIngress_serviceDesc, srv)
}

func _InteractionIngress_SendInteractionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionIngressServer).SendInteractionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap.i40aas.interaction.InteractionIngress/SendInteractionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionIngressServer).SendInteractionMessage(ctx, req.(*InteractionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _InteractionIngress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sap.i40aas.interaction.InteractionIngress",
	HandlerType: (*InteractionIngressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInteractionMessage",
			Handler:    _InteractionIngress_SendInteractionMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction.proto",
}
