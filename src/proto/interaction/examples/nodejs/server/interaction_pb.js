// source: interaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sap.i40aas.interaction.ConversationMember', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.Frame', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.Identification', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.InteractionMessage', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.InteractionStatus', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.InteractionStatusCode', null, global);
goog.exportSymbol('proto.sap.i40aas.interaction.Role', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.InteractionStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.InteractionStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.InteractionStatus.displayName = 'proto.sap.i40aas.interaction.InteractionStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.InteractionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.InteractionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.InteractionMessage.displayName = 'proto.sap.i40aas.interaction.InteractionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.Frame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.Frame.displayName = 'proto.sap.i40aas.interaction.Frame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.ConversationMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.ConversationMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.ConversationMember.displayName = 'proto.sap.i40aas.interaction.ConversationMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.Role.displayName = 'proto.sap.i40aas.interaction.Role';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sap.i40aas.interaction.Identification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sap.i40aas.interaction.Identification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sap.i40aas.interaction.Identification.displayName = 'proto.sap.i40aas.interaction.Identification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.InteractionStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.InteractionStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.InteractionStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.InteractionStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.InteractionStatus}
 */
proto.sap.i40aas.interaction.InteractionStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.InteractionStatus;
  return proto.sap.i40aas.interaction.InteractionStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.InteractionStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.InteractionStatus}
 */
proto.sap.i40aas.interaction.InteractionStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sap.i40aas.interaction.InteractionStatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.InteractionStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.InteractionStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.InteractionStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.InteractionStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional InteractionStatusCode code = 1;
 * @return {!proto.sap.i40aas.interaction.InteractionStatusCode}
 */
proto.sap.i40aas.interaction.InteractionStatus.prototype.getCode = function() {
  return /** @type {!proto.sap.i40aas.interaction.InteractionStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sap.i40aas.interaction.InteractionStatusCode} value
 * @return {!proto.sap.i40aas.interaction.InteractionStatus} returns this
 */
proto.sap.i40aas.interaction.InteractionStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.InteractionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.InteractionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.InteractionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.InteractionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.sap.i40aas.interaction.Frame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.InteractionMessage}
 */
proto.sap.i40aas.interaction.InteractionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.InteractionMessage;
  return proto.sap.i40aas.interaction.InteractionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.InteractionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.InteractionMessage}
 */
proto.sap.i40aas.interaction.InteractionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sap.i40aas.interaction.Frame;
      reader.readMessage(value,proto.sap.i40aas.interaction.Frame.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.InteractionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.InteractionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.InteractionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.InteractionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sap.i40aas.interaction.Frame.serializeBinaryToWriter
    );
  }
};


/**
 * optional Frame frame = 1;
 * @return {?proto.sap.i40aas.interaction.Frame}
 */
proto.sap.i40aas.interaction.InteractionMessage.prototype.getFrame = function() {
  return /** @type{?proto.sap.i40aas.interaction.Frame} */ (
    jspb.Message.getWrapperField(this, proto.sap.i40aas.interaction.Frame, 1));
};


/**
 * @param {?proto.sap.i40aas.interaction.Frame|undefined} value
 * @return {!proto.sap.i40aas.interaction.InteractionMessage} returns this
*/
proto.sap.i40aas.interaction.InteractionMessage.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sap.i40aas.interaction.InteractionMessage} returns this
 */
proto.sap.i40aas.interaction.InteractionMessage.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sap.i40aas.interaction.InteractionMessage.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.Frame.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.Frame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.Frame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Frame.toObject = function(includeInstance, msg) {
  var f, obj = {
    semanticprotocol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    replyby: jspb.Message.getFieldWithDefault(msg, 4, 0),
    receiver: (f = msg.getReceiver()) && proto.sap.i40aas.interaction.ConversationMember.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && proto.sap.i40aas.interaction.ConversationMember.toObject(includeInstance, f),
    conversationid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.Frame}
 */
proto.sap.i40aas.interaction.Frame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.Frame;
  return proto.sap.i40aas.interaction.Frame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.Frame}
 */
proto.sap.i40aas.interaction.Frame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSemanticprotocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplyby(value);
      break;
    case 5:
      var value = new proto.sap.i40aas.interaction.ConversationMember;
      reader.readMessage(value,proto.sap.i40aas.interaction.ConversationMember.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 6:
      var value = new proto.sap.i40aas.interaction.ConversationMember;
      reader.readMessage(value,proto.sap.i40aas.interaction.ConversationMember.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.Frame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.Frame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Frame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSemanticprotocol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReplyby();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sap.i40aas.interaction.ConversationMember.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sap.i40aas.interaction.ConversationMember.serializeBinaryToWriter
    );
  }
  f = message.getConversationid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string semanticProtocol = 1;
 * @return {string}
 */
proto.sap.i40aas.interaction.Frame.prototype.getSemanticprotocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.setSemanticprotocol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.sap.i40aas.interaction.Frame.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string messageId = 3;
 * @return {string}
 */
proto.sap.i40aas.interaction.Frame.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 replyBy = 4;
 * @return {number}
 */
proto.sap.i40aas.interaction.Frame.prototype.getReplyby = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.setReplyby = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ConversationMember receiver = 5;
 * @return {?proto.sap.i40aas.interaction.ConversationMember}
 */
proto.sap.i40aas.interaction.Frame.prototype.getReceiver = function() {
  return /** @type{?proto.sap.i40aas.interaction.ConversationMember} */ (
    jspb.Message.getWrapperField(this, proto.sap.i40aas.interaction.ConversationMember, 5));
};


/**
 * @param {?proto.sap.i40aas.interaction.ConversationMember|undefined} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
*/
proto.sap.i40aas.interaction.Frame.prototype.setReceiver = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.clearReceiver = function() {
  return this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sap.i40aas.interaction.Frame.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConversationMember sender = 6;
 * @return {?proto.sap.i40aas.interaction.ConversationMember}
 */
proto.sap.i40aas.interaction.Frame.prototype.getSender = function() {
  return /** @type{?proto.sap.i40aas.interaction.ConversationMember} */ (
    jspb.Message.getWrapperField(this, proto.sap.i40aas.interaction.ConversationMember, 6));
};


/**
 * @param {?proto.sap.i40aas.interaction.ConversationMember|undefined} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
*/
proto.sap.i40aas.interaction.Frame.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sap.i40aas.interaction.Frame.prototype.hasSender = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string conversationId = 7;
 * @return {string}
 */
proto.sap.i40aas.interaction.Frame.prototype.getConversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Frame} returns this
 */
proto.sap.i40aas.interaction.Frame.prototype.setConversationid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.ConversationMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.ConversationMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.ConversationMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    identification: (f = msg.getIdentification()) && proto.sap.i40aas.interaction.Identification.toObject(includeInstance, f),
    role: (f = msg.getRole()) && proto.sap.i40aas.interaction.Role.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.ConversationMember}
 */
proto.sap.i40aas.interaction.ConversationMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.ConversationMember;
  return proto.sap.i40aas.interaction.ConversationMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.ConversationMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.ConversationMember}
 */
proto.sap.i40aas.interaction.ConversationMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sap.i40aas.interaction.Identification;
      reader.readMessage(value,proto.sap.i40aas.interaction.Identification.deserializeBinaryFromReader);
      msg.setIdentification(value);
      break;
    case 2:
      var value = new proto.sap.i40aas.interaction.Role;
      reader.readMessage(value,proto.sap.i40aas.interaction.Role.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.ConversationMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.ConversationMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.ConversationMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentification();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sap.i40aas.interaction.Identification.serializeBinaryToWriter
    );
  }
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sap.i40aas.interaction.Role.serializeBinaryToWriter
    );
  }
};


/**
 * optional Identification identification = 1;
 * @return {?proto.sap.i40aas.interaction.Identification}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.getIdentification = function() {
  return /** @type{?proto.sap.i40aas.interaction.Identification} */ (
    jspb.Message.getWrapperField(this, proto.sap.i40aas.interaction.Identification, 1));
};


/**
 * @param {?proto.sap.i40aas.interaction.Identification|undefined} value
 * @return {!proto.sap.i40aas.interaction.ConversationMember} returns this
*/
proto.sap.i40aas.interaction.ConversationMember.prototype.setIdentification = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sap.i40aas.interaction.ConversationMember} returns this
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.clearIdentification = function() {
  return this.setIdentification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.hasIdentification = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Role role = 2;
 * @return {?proto.sap.i40aas.interaction.Role}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.getRole = function() {
  return /** @type{?proto.sap.i40aas.interaction.Role} */ (
    jspb.Message.getWrapperField(this, proto.sap.i40aas.interaction.Role, 2));
};


/**
 * @param {?proto.sap.i40aas.interaction.Role|undefined} value
 * @return {!proto.sap.i40aas.interaction.ConversationMember} returns this
*/
proto.sap.i40aas.interaction.ConversationMember.prototype.setRole = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sap.i40aas.interaction.ConversationMember} returns this
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.clearRole = function() {
  return this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sap.i40aas.interaction.ConversationMember.prototype.hasRole = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.Role}
 */
proto.sap.i40aas.interaction.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.Role;
  return proto.sap.i40aas.interaction.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.Role}
 */
proto.sap.i40aas.interaction.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sap.i40aas.interaction.Role.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Role} returns this
 */
proto.sap.i40aas.interaction.Role.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sap.i40aas.interaction.Identification.prototype.toObject = function(opt_includeInstance) {
  return proto.sap.i40aas.interaction.Identification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sap.i40aas.interaction.Identification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Identification.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idtype: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sap.i40aas.interaction.Identification}
 */
proto.sap.i40aas.interaction.Identification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sap.i40aas.interaction.Identification;
  return proto.sap.i40aas.interaction.Identification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sap.i40aas.interaction.Identification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sap.i40aas.interaction.Identification}
 */
proto.sap.i40aas.interaction.Identification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sap.i40aas.interaction.Identification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sap.i40aas.interaction.Identification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sap.i40aas.interaction.Identification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sap.i40aas.interaction.Identification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sap.i40aas.interaction.Identification.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Identification} returns this
 */
proto.sap.i40aas.interaction.Identification.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string idType = 2;
 * @return {string}
 */
proto.sap.i40aas.interaction.Identification.prototype.getIdtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sap.i40aas.interaction.Identification} returns this
 */
proto.sap.i40aas.interaction.Identification.prototype.setIdtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.sap.i40aas.interaction.InteractionStatusCode = {
  UNKNOWN: 0,
  OK: 200,
  FAILED: 500
};

goog.object.extend(exports, proto.sap.i40aas.interaction);
